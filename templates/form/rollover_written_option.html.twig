{% extends 'base.html.twig' %}

{% block title %}BSX - Dashboard{% endblock %}

{% block body %}
    <div class="grid gap-y-10 gap-x-8 sm:grid-cols-3">
        <div class="px-4 sm:p-0">
            <h2 class="m-0 text-base font-semibold leading-7 text-gray-900">Some Form</h2>
            <p class="mt-1 text-sm leading-6 text-gray-600">some explaination</p>
        </div>
        <form name="{{ form.vars.full_name }}" method="{{ form.vars.method }}" x-data="WrittenOptionForm()" class="bg-white shadow-sm ring-offset-1 ring-gray-900 sm:rounded-xl sm:col-span-2">
            <div class="px-4 py-6 sm:p-8">
                <div class="grid max-w-[42rem] grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6 ">
                    <div class="col-span-full">
                        <label for="written_option_contracts" class="block text-sm font-medium leading-6 text-gray-900 required">Old Contract</label>
                        <div class="mt-2">
                            <input type="text" id="written_option_old" name="" required="required" class="block w-full rounded-md border-0 px-3 py-1.5 text-gray-900 shadow-sm ring-inset ring-1 ring-gray-300 text-sm leading-6" value="{{ old_option.stock.ticker }} - ${{ old_option.strike|number_format(2) }} - {{ old_option.expiry|date("F y, Y ") }}" readonly>
                        </div>
                    </div>

                    <div class="col-span-full">
                        <label for="{{ form.contract_type.vars.id }}" class="block text-sm font-medium leading-6 text-gray-900 {% if form.contract_type.vars.required == true %}required{% endif %}">{{ form.contract_type.vars.label }}</label>
                        <div class="mt-2 grid grid-cols-2 gap-3">
                            <span class="flex cursor-pointer items-center justify-center rounded-md bg-white p-3 text-sm font-semibold uppercase text-gray-900 ring-1 ring-inset ring-gray-300 flex-1" :class="selected_type == 1 && '!bg-indigo-600 text-white'" x-on:click="switchType(1)">Covered Call</span>
                            <span class="flex cursor-pointer items-center justify-center rounded-md bg-white p-3 text-sm font-semibold uppercase text-gray-900 ring-1 ring-inset ring-gray-300 flex-1" :class="selected_type == 2 && '!bg-indigo-600 text-white'" x-on:click="switchType(2)">Cash Secured Put</span>
                        </div>
                    </div>

                    {% for input in form.children %}
                        {% if input.vars.name != "Stock" and input.vars.name != "total" and input.vars.name != "contract_type" and input.vars.name != "payment_currency" and input.vars.name != "payment_locked" and  input.vars.name != "save" and input.vars.name != "_token" %}
                            <div class="col-span-full">
                                <label for="{{ input.vars.id }}" class="block text-sm font-medium leading-6 text-gray-900 {% if input.vars.required == true %}required{% endif %}">{{ input.vars.label }}</label>
                                <div class="mt-2">
                                    {{ form_widget(input) }}
                                </div>
                            </div>
                        {% endif %}
                    {% endfor %}

                    <div class="col-span-full">
                        <label for="{{ form.payment_currency.vars.id }}" class="block text-sm font-medium leading-6 text-gray-900 {% if form.payment_currency.vars.required == true %}required{% endif %}">{{ form.payment_currency.vars.label }}</label>
                        <div class="mt-2 grid grid-cols-2 gap-3">
                            <span class="flex cursor-pointer items-center justify-center rounded-md bg-white p-3 text-sm font-semibold uppercase text-gray-900 ring-1 ring-inset ring-gray-300 flex-1" :class="selected_currency == 'can' && '!bg-indigo-600 text-white'" x-on:click="switchCurrency('can')">Canadian Dollars</span>
                            <span class="flex cursor-pointer items-center justify-center rounded-md bg-white p-3 text-sm font-semibold uppercase text-gray-900 ring-1 ring-inset ring-gray-300 flex-1" :class="selected_currency == 'usd' && '!bg-indigo-600 text-white'" x-on:click="switchCurrency('usd')">United States Dollars</span>
                        </div>
                    </div>

                    <div class="col-span-full">
                        <label for="written_option_rollover_total" class="block text-sm font-medium leading-6 text-gray-900 required">Total Amount</label>
                        <div class="mt-2">
                            <input type="text" id="written_option_rollover_total" name="written_option_rollover[total]" required="required" class="block w-full rounded-md border-0 px-3 py-1.5 text-gray-900 shadow-sm ring-inset ring-1 ring-gray-300 text-sm leading-6" placeholder="$0.00">
                        </div>
                    </div>

                    <div class="col-span-full">
                        <div class="mt-2">
                            <div class="flex items-center">
                                <button type="button" class="fee-button relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-transparent bg-gray-200" :class="payment_locked == true && 'checked'" x-on:click="payment_locked_selected()">
                                    <span class="pointer-events-none inline-block h-5 w-5 rounded-full bg-white"></span>
                                </button>
                                <span class="ml-3 text-sm">
                                    <span class="font-medium">Lock Payment</span>
                                    <span class="font-normal text-gray-500">(for Rollovers)</span>
                                </span>
                            </div>
                            <style>
                                .fee-button{
                                    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
                                    transition-duration: 200ms;
                                    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
                                }

                                .fee-button:focus {
                                    outline: 2px solid transparent;
                                    outline-offset: 2px;
                                    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
                                    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);
                                    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
                                    --tw-ring-opacity: 1;
                                    --tw-ring-color: rgb(79 70 229 / var(--tw-ring-opacity));
                                    --tw-ring-offset-width: 2px;
                                }

                                .fee-button.checked{
                                    --tw-bg-opacity: 1;
                                    background-color: rgb(79 70 229 / var(--tw-bg-opacity));
                                }

                                .fee-button span{
                                    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
                                    --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
                                    --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);
                                    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
                                    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);
                                    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
                                    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;
                                    transition-duration: 200ms;
                                    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
                                }

                                .fee-button.checked span{
                                    --tw-translate-x: 1.25rem;
                                    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
                                }

                            </style>
                            <div class="hidden">
                                <input type="checkbox" id="written_option_rollover_payment_locked" name="written_option_rollover[payment_locked]" value="payment_locked" x-model="payment_locked">
                            </div>

                        </div>
                    </div>
                </div>
            </div>
            <div class="flex items-center justify-end gap-x-6 border-t-[1px] border-gray-900 px-4 py-4 sm:px-8">
                <button type="submit" id="{{ form.vars.name }}_save" name="{{ form.vars.name }}[save]" class="normal-case cursor-pointer rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow">Save</button>
            </div>

            {% if error %}
                <br />
                {{ error }}
            {% endif %}
            {{ form_row(form._token) }}

            <input type="hidden" name="written_option_rollover[contract_type]" id="written_option_rollover_contract_type" x-model="selected_type" />
            <input type="hidden" name="written_option_rollover[payment_currency]" id="written_option_rollover_payment_currency" x-model="selected_currency" />
            <input type="hidden" name="written_option_rollover[payment_locked]" id="written_option_rollover_payment_locked" x-model="payment_locked_converted()" />
        </form>

        {# render tailwind class that form inputs will use.. #}
        <div class="block hidden w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-inset ring-1 ring-gray-300 text-sm leading-6"></div>
    </div>

    <script>
        $(() => {
            $("#written_option_rollover_new_price, #written_option_rollover_old_price, #written_option_rollover_contracts").on("change", function(){
                var new_contact = ((parseFloat($("#written_option_rollover_new_price").val()) * parseInt($("#written_option_rollover_contracts").val())) * 100);
                var old_contract = ((parseFloat($("#written_option_rollover_old_price").val()) * parseInt($("#written_option_rollover_contracts").val())) * 100);
                var fee = 9.95 + (1.25 * parseInt($(" #written_option_rollover_contracts").val()));
                var cost = floor10((new_contact - old_contract - fee), -2);

                $("#written_option_rollover_total").val(cost);
            });
        });

        function decimalAdjust(type, value, exp) {
            type = String(type);
            if (!["round", "floor", "ceil"].includes(type)) {
                throw new TypeError("The type of decimal adjustment must be one of 'round', 'floor', or 'ceil'.",);
            }

            exp = Number(exp);
            value = Number(value);
            
            if (exp % 1 !== 0 || Number.isNaN(value)) {
                return NaN;
            } else if (exp === 0) {
                return Math[type](value);
            }
            
            const [magnitude, exponent = 0] = value.toString().split("e");
            const adjustedValue = Math[type](`${magnitude}e${exponent - exp}`);
            // Shift back
            const [newMagnitude, newExponent = 0] = adjustedValue.toString().split("e");
            return Number(`${newMagnitude}e${+newExponent + exp}`);
        }

        // Decimal round
        const round10 = (value, exp) => decimalAdjust("round", value, exp);
        // Decimal floor
        const floor10 = (value, exp) => decimalAdjust("floor", value, exp);
        // Decimal ceil
        const ceil10 = (value, exp) => decimalAdjust("ceil", value, exp);   
    </script>

    <script>
        function WrittenOptionForm() {

            return {
                old_price: {{ old_option.price }},
                dropdownOpen: false,
                selectedStock: null,
                payment_locked: false,
                selected_type: {{ old_option.contractType }},
                selected_currency: "can",
                selectedStockName: "Select Stock",
                selectedStockIcon:"https://plus.unsplash.com/premium_photo-1678048604398-f42dda6997bd?q=80&w=1964&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",

                checkSelected(id){
                    return this.selectedStock === id;
                },

                payment_locked_selected(){
                    this.payment_locked = !this.payment_locked;
                },

                payment_locked_converted(){
                    return (this.payment_locked) ? "1" : "0";
                },

                switchCurrency(id){
                    this.selected_currency = id;
                },

                selectStock(id, name, ticker){
                    this.selectedStock = id;
                    this.selectedStockName = name;
                    this.selectedStockIcon = "/assets/images/company_logos/" + ticker + ".jpg";
                    this.toggleDropdown();
                },

                toggleDropdown(){
                    this.dropdownOpen = (!this.dropdownOpen);
                }
            }
        }
    </script>
{% endblock %}